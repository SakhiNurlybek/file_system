import java.util.Scanner;

/**
 * Технические требования к реализации проекта Файловая система
 * <p>
 * Задача:
 * Вашей задачей является реализация работы с файловой системой, получая команды из консоли, используя Java и принципы ООП.
 * <p>
 * Подробное объяснение задачи:
 * <p>
 * У Вас консольное приложение. Это означает, что все команды пользователь вводит в консоль. Вам необходимо реализовать пять команд работы с файловой системой: создать файл (команда create), удалить файл(команда delete), переименовать файл (команда rename) и скопировать файл из одной папки в другую (команда copy).
 * <p>
 * Команды:
 * 1. Создать файл в папке.
 * В консоль вводится строка, состоящая из названия команды, названия файла с его расширением и пути к папке, в которой нужно создать файл. Все данные вводятся через пробел. Пример ввода: create oop.txt C:\Users\admin\Desktop
 * Если в строке команды есть ошибка, то необходимо вывести на экран Error, enter command one more time.
 * Если строка команды введена без ошибок, то
 * 1) В случае, если файл с таким названием в папке не существует, то создать файл и вывести в консоль Done, file oop.txt is created. Если перейти в папку, указанную в пути, то файл должен быть фактически создан в папке.
 * 2) В случае, если файл с таким названием уже есть в папке, то необходимо создать файл "название-2.расширение" Например, "oop-2.txt". Вывести в консоль Done, file oop-2.txt is created. Если перейти в папку, указанную в пути, то файл должен быть фактически создан в папке.
 * <p>
 * 2. Удалить файл в папке.
 * В консоль вводится строка, состоящая из названия команды, названия файла с его расширением и пути к папке, из которой нужно удалить файл.
 * Все данные вводятся через пробел. Пример ввода: delete oop.txt C:\Users\admin\Desktop
 * Если в строке команды есть ошибка, то необходимо вывести на экран Error, enter command one more time.
 * Если строка команды введена без ошибок, то проверить наличие файла с таким названием в папке. Если файла не существует, то вывести Error, file is not found. Если файл есть в папке, то удалить его, вывести в консоль Done, file oop.txt is deleted. При переходе в папку, указанную в пути, файл должен быть фактически удален из папки.
 * <p>
 * 3. Переименовать файл в папке
 * В консоль вводится строка, состоящая из названия команды, пути к папке, названия файла с его расширением и нового названия файла.
 * Все данные вводятся через пробел. Пример ввода: rename C:\Users\admin\Desktop oop.txt OOPmathncode.txt
 * Если в строке команды есть ошибка, то необходимо вывести на экран Error, enter command one more time.
 * Если строка команды введена без ошибок, то проверить наличие файла с таким названием в папке. Если файла не существует, то вывести Error, file is not found. Если файл есть в папке, то переименовать его, вывести в консоль Done, file oop.txt is renamed. New name is OOPmathncode.txt
 * <p>
 * 4. Скопировать файл из одной папки в другую.
 * В консоль вводится строка, состоящая из названия команды, названия файла с расширением, пути к папке, из которой нужно скопировать файл и пути к папке, в которую нужно вставить файл.
 * Все данные вводятся через пробел. Пример ввода: copy oop.txt C:\Users\admin\Desktop C:\Users\admin\Desktop\folder
 * Если в строке команды есть ошибка, то необходимо вывести на экран Error, enter command one more time.
 * Если строка команды введена без ошибок, то скопировать файл из одной папки в другую. Обратите внимание, если файл с таким названием уже есть в папке, то необходимо создать файл "название-2.расширение" Например, "oop-2.txt". Вывести в консоль Done, file oop-2.txt is copied. Если перейти в папку, указанную в пути, то файл должен быть фактически скопирован из одной папки в другую.
 * <p>
 * Ни в коем случае программа не должна аварийно завершаться. Если произошла ошибка, программа должна сообщить об этом и попросить ввести команду снова.
 * <p>
 * В работе необходимо использовать класс File, который представляет файлы и пути папок в абстрактной манере. Этот класс используется для создания, поиска, удаления файлов и каталогов и т.д.
 * <p>
 * Критерии оценивания работы
 * Работа будет оценена по двум параметрам от 0 до 100.
 * Оценка за работу программы. На сколько все команды выполняются корректно, не завершается ли аварийно программа
 * Оценка за код программы. На сколько хорошо написан код, на сколько соблюдены принципы ООП, конвенций Java.
 */
public class Main {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        String operation = scanner.next();

        switch (operation) {
            case "create" -> createFile();
            case "rename" -> renameFile();
            case "copy" -> copyFile();
            case "delete" -> deleteFile();
            default -> throw new RuntimeException();
        }

    }

    private static void deleteFile() {

    }

    private static void copyFile() {

    }

    private static void renameFile() {

    }

    private static void createFile() {

    }
}